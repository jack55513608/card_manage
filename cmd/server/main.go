package main

import (
	"log"
	"net/http"

	"card_manage/internal/api"
	"card_manage/internal/config"
	"card_manage/internal/repository"
	"card_manage/internal/service"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	_ "card_manage/docs" // docs is generated by Swag CLI
)

// @title Card Management API
// @version 1.0
// @description This is a sample server for a card management system.
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
func main() {
	// Load configuration
	cfg, err := config.LoadConfig(".")
	if err != nil {
		log.Fatalf("cannot load config: %v", err)
	}

	// Connect to the database
	db, err := repository.ConnectDB(cfg.DBDriver, cfg.DBSource)
	if err != nil {
		log.Fatalf("cannot connect to db: %v", err)
	}
	defer db.Close()

	// Initialize dependencies
	jwtService, err := service.NewJWTService(cfg.JWTSecret, cfg.JWTExpiresIn)
	if err != nil {
		log.Fatalf("cannot create jwt service: %v", err)
	}

	userRepo := repository.NewUserRepository(db)
	storeRepo := repository.NewStoreRepository(db)
	cardRepo := repository.NewCardRepository(db)
	consignmentRepo := repository.NewConsignmentRepository(db)
	transactionRepo := repository.NewTransactionRepository(db)
	settlementRepo := repository.NewSettlementRepository(db)

	userService := service.NewUserService(userRepo)
	storeService := service.NewStoreService(storeRepo)
	cardService := service.NewCardService(cardRepo, storeRepo)
	consignmentService := service.NewConsignmentService(consignmentRepo, cardRepo, storeRepo)
	transactionService := service.NewTransactionService(transactionRepo, consignmentRepo, storeRepo, db)
	settlementService := service.NewSettlementService(settlementRepo, consignmentRepo, storeRepo, db)

	userHandler := api.NewUserHandler(userService, jwtService)
	storeHandler := api.NewStoreHandler(storeService)
	cardHandler := api.NewCardHandler(cardService)
	consignmentHandler := api.NewConsignmentHandler(consignmentService)
	transactionHandler := api.NewTransactionHandler(transactionService)
	settlementHandler := api.NewSettlementHandler(settlementService)

	// Setup server and routes
	r := gin.Default()

	// Serve static files from the uploads directory
	r.Static("/uploads", "./uploads")

	// Swagger route
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Public routes
	r.GET("/ping", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"message": "pong"})
	})
	// @Summary Test Endpoint
	// @Description A simple test endpoint.
	// @Tags test
	// @Produce json
	// @Success 200 {object} map[string]string "{\"message\": \"test successful\"}"
	// @Router /test [get]
	r.GET("/test", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"message": "test successful"})
	})
	r.POST("/register", userHandler.Register)
	r.POST("/login", userHandler.Login)

	// Authenticated routes
	apiRoutes := r.Group("/api")
	apiRoutes.Use(api.AuthMiddleware(jwtService))
	{
		apiRoutes.GET("/profile", func(c *gin.Context) {
			payload, exists := c.Get(api.AuthorizationPayloadKey)
			if !exists {
				c.JSON(http.StatusUnauthorized, gin.H{"error": "unauthorized"})
				return
			}
			c.JSON(http.StatusOK, gin.H{"message": "welcome to your profile", "payload": payload})
		})

		// User routes (example of admin-only route)
		userRoutes := apiRoutes.Group("/users")
		userRoutes.Use(api.RoleMiddleware("ADMIN"))
		{
			userRoutes.GET("/:id", userHandler.GetUserByID)
		}

		// Store routes
		storeRoutes := apiRoutes.Group("/stores")
		storeRoutes.Use(api.RoleMiddleware("STORE"))
		{
			storeRoutes.POST("", storeHandler.CreateStore)
		}

		// Card routes
		cardRoutes := apiRoutes.Group("/cards")
		{
			// STORE-only routes for writing data
			cardRoutes.POST("", api.RoleMiddleware("STORE"), cardHandler.CreateCard)
			cardRoutes.PUT("/:id", api.RoleMiddleware("STORE"), cardHandler.UpdateCard)
			cardRoutes.DELETE("/:id", api.RoleMiddleware("STORE"), cardHandler.DeleteCard)

			// PLAYER and STORE routes for reading data
			cardRoutes.GET("", api.RoleMiddleware("PLAYER", "STORE"), cardHandler.ListCards)
			cardRoutes.GET("/:id", api.RoleMiddleware("PLAYER", "STORE"), cardHandler.GetCard)
		}

		// Consignment routes
		consignmentRoutes := apiRoutes.Group("/consignments")
		{
			// Player creates a consignment request
			consignmentRoutes.POST("", api.RoleMiddleware("PLAYER"), consignmentHandler.CreateConsignment)
			
			// Store updates the status of an item in a consignment
			consignmentRoutes.PUT("/items/:itemId", api.RoleMiddleware("STORE"), consignmentHandler.UpdateConsignmentItemStatus)

			// Routes for listing consignments can be added here later if needed
		}

		// Transaction routes
		transactionRoutes := apiRoutes.Group("/transactions")
		transactionRoutes.Use(api.RoleMiddleware("STORE"))
		{
			transactionRoutes.POST("", transactionHandler.CreateTransaction)
		}


		// Settlement routes
		settlementRoutes := apiRoutes.Group("/settlements")
		{
			// Player action: Create a settlement request
			settlementRoutes.POST("", api.RoleMiddleware("PLAYER"), settlementHandler.CreateSettlement)
			// Shared/Store actions:
			// settlementRoutes.GET("", settlementHandler.ListSettlements)
			// settlementRoutes.PUT("/:id", api.RoleMiddleware("STORE"), settlementHandler.CompleteSettlement)
		}
	}

	// Start server
	if err := r.Run(cfg.ServerAddress); err != nil {
		log.Fatalf("failed to run server: a%v", err)
	}
}
